// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tests for <CollapseButton /> should match SnapShot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CollapseButton
    alignment="left"
    className=""
    collapse={true}
    onClick={null}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "active": false,
      "ariaLabel": "expand",
      "ariaLabelledBy": "",
      "children": <Icon
        ariaLabel={null}
        buttonClassName=""
        className=""
        color=""
        description=""
        isAria={true}
        name="panel-control-right_12"
        onClick={null}
        size={null}
        sizeOverride={false}
        style={null}
        title=""
        type=""
      />,
      "circle": false,
      "className": "cui-collapse-button cui-collapse-button--left",
      "color": "",
      "containerLarge": false,
      "disabled": false,
      "expand": false,
      "href": "",
      "index": null,
      "isButtonGroup": false,
      "label": "",
      "large": false,
      "loading": false,
      "onClick": [Function],
      "removeStyle": false,
      "size": 36,
      "style": Object {},
      "tag": "button",
      "type": "button",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "ariaLabel": null,
        "buttonClassName": "",
        "className": "",
        "color": "",
        "description": "",
        "isAria": true,
        "name": "panel-control-right_12",
        "onClick": null,
        "size": null,
        "sizeOverride": false,
        "style": null,
        "title": "",
        "type": "",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "active": false,
        "ariaLabel": "expand",
        "ariaLabelledBy": "",
        "children": <Icon
          ariaLabel={null}
          buttonClassName=""
          className=""
          color=""
          description=""
          isAria={true}
          name="panel-control-right_12"
          onClick={null}
          size={null}
          sizeOverride={false}
          style={null}
          title=""
          type=""
        />,
        "circle": false,
        "className": "cui-collapse-button cui-collapse-button--left",
        "color": "",
        "containerLarge": false,
        "disabled": false,
        "expand": false,
        "href": "",
        "index": null,
        "isButtonGroup": false,
        "label": "",
        "large": false,
        "loading": false,
        "onClick": [Function],
        "removeStyle": false,
        "size": 36,
        "style": Object {},
        "tag": "button",
        "type": "button",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "ariaLabel": null,
          "buttonClassName": "",
          "className": "",
          "color": "",
          "description": "",
          "isAria": true,
          "name": "panel-control-right_12",
          "onClick": null,
          "size": null,
          "sizeOverride": false,
          "style": null,
          "title": "",
          "type": "",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
